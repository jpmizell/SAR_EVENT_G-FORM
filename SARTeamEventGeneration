/**
 * TITE: SARTeamEventGeneration
 * DESCRIPTION: Script based on the input from one google form that creates and populate various search managment forms and documents for team communication, response, & asset management.
 * AUTHOR: John Mizell
 * AUTHOR URL: www.mizellbros.com
 * MATINENANCE DATE: 2023-01-26
 * ORGANIZATION: SANTA CRUZ COUNTY SEARCH AND RESCUE
 * ORGANIZATON URL: www.sczsar.com
 * COPYRIGHT HOLDER: John Mizell, 2023
 */
 
 function SARTeamEventGeneration() {
  const formId = ``; // ENTER THE ID OF THE EVENT TRIGGER FORM
  const agencyFooter = ``;

  // PULL SUMMARY DETAILS FROM FORM FOR FORM & DOCUMENT CREATION
  let form = FormApp.openById(formId); // RETURNS FORM
  let formResponses = form.getResponses(); // RETURNS FormResponse[]
  let fullReport = "";
// THE DATA LOOP
let lastResponse = formResponses.length-1;
  //for (let i = 0; i < formResponses.length; i++) { // THE ALL RESPONSE LOOP
    let formResponse = formResponses[lastResponse]; // RETURNS Response (use 'i' for ALL RESPONSE LOOP 'lastResponse' for LAST RESPONSE LOOP)
    let itemResponses = formResponse.getItemResponses(); // returns the item responses for each form response
    let formResponseDateTime = formResponse.getTimestamp();

    for (let j = 0; j < itemResponses.length; j++) {
      let itemResponseTitle = itemResponses[j].getItem().getTitle(); // RETURNS a single response question. 
      let itemResponseResponse = itemResponses[j].getResponse(); // RETURNS a single response value.
      
      fullReport = fullReport+itemResponseTitle+": "+itemResponseResponse+"\n"
      // fullReport = new Object();
      // fullReport.itemResponseTitle = itemResponseResponse;
      // Logger.log(`"%s": "%s"`, itemResponseTitle, itemResponseResponse);

      if (itemResponseTitle == "GENERAL BRIEFING DATE") {var formResponseBriefingDate = itemResponseResponse;}
      if (itemResponseTitle == "MP NAME") {var formResponseMPName = itemResponseResponse;}
      if (itemResponseTitle == "INCIDENT NAME") {var formResponseIncidentName = itemResponseResponse;}
      if (itemResponseTitle == "EVENT TYPE") {var formResponseEventType = itemResponseResponse;}
      if (itemResponseTitle == "INCIDENT DESCRIPTON") {var formResponseIncidentDescription = itemResponseResponse;}
      //if (itemResponseTitle == "IS MUTUAL AID") {var formResponseIncidentDescription = itemResponseResponse;} // UPDATE THE let CREATED!!!!
      //if (itemResponseTitle == "MP LKP") {var formResponseIncidentDescription = itemResponseResponse;} // UPDATE THE let CREATED!!!!
      //if (itemResponseTitle == "RESOURCE NEEDS") {var formResponseIncidentDescription = itemResponseResponse;} // UPDATE THE let CREATED!!!!
      //if (itemResponseTitle == "CP LOCATION") {var formResponseIncidentDescription = itemResponseResponse;} // UPDATE THE let CREATED!!!!
      //if (itemResponseTitle == "GENERAL BRIEFING TIME") {var formResponseIncidentDescription = itemResponseResponse;} // UPDATE THE let CREATED!!!!
      //if (itemResponseTitle == "SARTOPO LINK") {var formResponseIncidentDescription = itemResponseResponse;} // UPDATE THE let CREATED!!!!
      //if (itemResponseTitle == "SCZ-SO CASE # / CAL OES #") {var formResponseIncidentDescription = itemResponseResponse;} // UPDATE THE let CREATED!!!!
      //if (itemResponseTitle == "DEPLOY CODEORANGE") {var formResponseIncidentDescription = itemResponseResponse;} // UPDATE THE let CREATED!!!!
    } // END THE j RESPONSE LOOP

Logger.log(`PULLED SUMMARY DETAILS FROM FORM FOR FORM & DOCUMENT CREATION`);

    // SET DIRECTORY NAME BASED ON FORM INFORMATION
    let parentDirectoryId=``; // sets all responses to nest under the 'MISSIONS' directory. Use the case statement below if alternate directories desired. 
    let directoryName = formResponseBriefingDate+" "+formResponseIncidentName+" ("+formResponseMPName+") "+formResponseEventType;
    Logger.log(`SET DIRECTORY NAME BASED ON FORM INFORMATION`);
  // } // END THE i RESPONSE LOOP 
Logger.log("DIRECTORY NAME: "+directoryName);

// CREATE THE DIRECTORY
let parentFolder = DriveApp.getFolderById(parentDirectoryId);
let newEventFolder = parentFolder.createFolder(directoryName);
let newEventFolderId = newEventFolder.getId();
let eventFolder = DriveApp.getFolderById(newEventFolderId);
Logger.log(`CREATED THE DIRECTORY`);

// SET DOCUMENT STYLES
let styleCenter = {};
styleCenter[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] = DocumentApp.HorizontalAlignment.CENTER;
let docBoldStyle = {};
docBoldStyle[DocumentApp.Attribute.BOLD] = true;
let imageSize = {};
imageSize[DocumentApp.Attribute.HEIGHT] = 300;
imageSize[DocumentApp.Attribute.WIDTH] = 300;
Logger.log(`STYLES SET`);

// THE FUNCTIONS
// ** CREATE & POPULATE HEADER / FOOTER / TITLE OF DOC
function AddHeaderFooterTitle(eventDocumentFile,headerText,footerText,titleText) {
  // SET HEADER FOOTER TITLE STYLES
  let styleHeader = {};
  styleHeader[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] = DocumentApp.HorizontalAlignment.CENTER;
  styleHeader[DocumentApp.Attribute.FONT_FAMILY] = `Calibri`;
  styleHeader[DocumentApp.Attribute.FONT_SIZE] = 10;
  let styleTitle = {};
  styleTitle[DocumentApp.Attribute.HEADING] = DocumentApp.ParagraphHeading.TITLE;
  styleTitle[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] = DocumentApp.HorizontalAlignment.CENTER;
  styleTitle[DocumentApp.Attribute.FONT_FAMILY] = `Calibri`;
  styleTitle[DocumentApp.Attribute.FONT_SIZE] = 16;
  styleTitle[DocumentApp.Attribute.BOLD] = true;
  // ADD HEADER AND FOOTER TO DOCUMENT
  eventDocumentFile.addHeader();
  eventDocumentFile.addFooter();
  Logger.log("HEADER & FOOTER SECTION ADDED");
  let eventDocumentHeader = eventDocumentFile.getHeader();
  let theHeader = eventDocumentHeader.insertParagraph(0,headerText)
  theHeader.setAttributes(styleHeader);
  Logger.log("ADDED HEADER TEXT");
  let eventDocumentFooter = eventDocumentFile.getFooter();
  let theFooter = eventDocumentFooter.insertParagraph(0,footerText);
  theFooter.setAttributes(styleHeader);
  Logger.log("ADDED FOOTER TEXT");
  let eventDocumentBody = eventDocumentFile.getBody();
  let theTitle = eventDocumentBody.insertParagraph(0,titleText);
  theTitle.setAttributes(styleTitle);
  Logger.log("ADDED TITLE TEXT");
}
// ** CREATE A BLANK RESPONSE FORM
function AddEventForm(theEventDirectory,theFormName,setCollectEmail,theDataDestination) {
  // CREATE THE FORM IN THE DIRECTORY
  let newForm = FormApp.create(directoryName+` `+theFormName);
  let newFormId = newForm.getId();
  let newFormFile = DriveApp.getFileById(newFormId);
  newFormFile.moveTo(theEventDirectory);
  newForm.setCollectEmail(setCollectEmail);
  Logger.log(`CREATED THE FORM `+theFormName);
  // UPDATE SPREADSHEET WITH FORM RESPONSES
  let theNewForm = FormApp.openById(newFormId);
  theNewForm.setDestination(FormApp.DestinationType.SPREADSHEET, eventDataId)
  
  // SET THE SHEET NAME
  function get_form_destination_sheet(form) {
    let form_id = form.getId();
    let destination_id = form.getDestinationId();
    if (destination_id) {
        let spreadsheet = SpreadsheetApp.openById(destination_id);
        let matches = spreadsheet.getSheets().filter(function (sheet) {
            let url = sheet.getFormUrl();
            return url && url.indexOf(form_id) > -1;
        });
        return matches.length > 0 ? matches[0] : null; 
    }
    return null;
  }
  get_form_destination_sheet(newForm).setName(theFormName);

  //let theNewFormDataSheet = eventData.getSheetByName(`Form Responses 1`);
  //theNewFormDataSheet.setName(theFormName);
  return newForm;
  Logger.log(`UPDATED SPREADSHEET WITH THE FORM RESPONSES FROM `+theFormName);
}

// CREATE THE FILES
// CREATE THE DOC AND MOVE TO THE EVENT DIRECTORY
let newDoc = DocumentApp.create(directoryName+" Summary & Notes");
let newDocId = newDoc.getId();
let summaryDoc = DocumentApp.openById(newDocId);
let docFile = DriveApp.getFileById(newDocId);
docFile.moveTo(eventFolder);
Logger.log(`CREATED THE DOC & MOVED TO EVENT DIRECTORY`);

// CREATE SPREADSHEET AND MOVE TO EVENT DIRECTORY
let eventData = SpreadsheetApp.create(directoryName+` EVENT DATA`); 
let eventDataId = eventData.getId();
let eventDataSheetFile = DriveApp.getFileById(eventDataId);
eventDataSheetFile.moveTo(eventFolder);
Logger.log(`CREATED SPREADSHEET AND MOVED TO EVENT DIRECTORY`);

// CREATE FORMS
let signInForm = AddEventForm(eventFolder,`Sign-In Sheet`,true,eventDataId);
let availabilityForm = AddEventForm(eventFolder,`RESPONSES`,true,eventDataId);

// FORM UPDATES ************************************************************** 
// ADD FIELDS TO SIGN-IN FORM
let signInItemMC = signInForm.addMultipleChoiceItem();
signInItemMC.setTitle("In/Out")
    .setChoices([
        signInItemMC.createChoice("Sign-In"),
        signInItemMC.createChoice("Sign-Out")
     ])
    .showOtherOption(false)
    .setRequired(true);
let signInURL = signInForm.getPublishedUrl();
Logger.log(`POPULATED THE SIGN-IN FORM`);

// ADD FIELDS TO THE AVAILABILITY FORM
let availItemMC = availabilityForm.addMultipleChoiceItem();
availItemMC.setTitle("Availability")
    .setChoices([
        availItemMC.createChoice("Immediately Responding"),
        availItemMC.createChoice("Delayed Response"),
        availItemMC.createChoice("Unavailable")
     ])
    .showOtherOption(true)
    .setRequired(true);
let availURL = availabilityForm.getPublishedUrl();
Logger.log(`POPULATED THE AVAILABILITY FORM`);

// CREATE THE AVAILABILITY LINK, QR CODE, & MOVE TO DIRECTORY
let availQRLink = "https://chart.googleapis.com/chart?chs=500x500&cht=qr&chl="+availURL;
let availQRImage = UrlFetchApp.fetch(availQRLink).getBlob();
let availQRImageFile = DriveApp.createFile(availQRImage);
availQRImageFile.moveTo(eventFolder);
availQRImageFile.setName(directoryName+` AVAILABILITY QR CODE`);
Logger.log(`CREATED THE AVAILABILITY LINK, QR CODE, & MOVE TO DIRECTORY`);

// CREATE THE SIGN-IN/SIGN-OUT QR CODE & MOVE TO DIRECTORY
let signInQRLink = `https://chart.googleapis.com/chart?chs=500x500&cht=qr&chl=`+signInURL;
let signInQRImage = UrlFetchApp.fetch(signInQRLink).getBlob();
let signInQRImageFile = DriveApp.createFile(signInQRImage);
signInQRImageFile.moveTo(eventFolder);
signInQRImageFile.setName(directoryName+` SIGN-IN QR CODE`);
Logger.log(`CREATED THE SIGN-IN/SIGN-OUT QR CODE & MOVE TO DIRECTORY`);

// SHEET UPDATES *************************************************************
// COPY CODEORANGE ROSTER DATA TO EVENT DATA SHEET
const rosterURL = ``; // SET THE ROSTER URL
const rosterId = ``; // SET THE ROSTER FILE ID "SAR ROSTER PRIMARY"
let rosterSource = SpreadsheetApp.openById(rosterId);
let rosterSourceSheet = rosterSource.getSheetByName(`CODEORANGE[A]`);
let destination = SpreadsheetApp.openById(eventDataId);
rosterSourceSheet.copyTo(destination);
eventData.getSheetByName(`Copy of CODEORANGE[A]`).setName(`ROSTER`);
/**
// Add response to roster sheet
let rosterSheet = eventData.getSheetByName(`ROSTER`);
rosterSheet.getRange("N1").setValue(`AVAILABLE RESPONSE`);
rosterSheet.getRange("N2:N").setValue(`=IFNA(IF(MATCH(D2,RESPONDING!B:B,0)>0,"YES"),"NO")`);
rosterSheet.getRange("O1").setValue(`SIGNED-IN?`);
rosterSheet.getRange("O2:N").setValue(`=IFNA(IF(MATCH(D2,STATUS!F:F,0)>0,"YES"),"NO")`);
rosterSheet.getRange("P1").setValue(`RECALL?`);
rosterSheet.getRange("P2:N").setValue(`=IF(N2="YES","NO",IF(O2="YES","NO","YES"))`);
*/
Logger.log(`COPIED CODEORANGE ROSTER DATA TO EVENT DATA SHEET`);

// UPDATE SHEET WITH STATUS QUERY
let statusSheet = eventData.insertSheet(); // insert (add) a new sheet
statusSheet.setName(`STATUS`);
//let statusSheet = eventData.getSheetByName(`STATUS`);
statusSheet.getRange("F1").setValue(`EMAIL`);
statusSheet.getRange("F2").setValue(`=IFERROR(UNIQUE(QUERY('Sign-In Sheet'!A:C,"SELECT B WHERE B <> 'Email Address'",0)),"NO SIGN-IN YET")`);
statusSheet.getRange("A1").setValue(`NAME`);
statusSheet.getRange("A2:A").setValue(`=IFERROR(INDEX(ROSTER!B:B,MATCH(INDIRECT(ADDRESS(ROW(),6,4)),ROSTER!D:D,0)),"")`);
statusSheet.getRange("B1").setValue(`STATUS`);
statusSheet.getRange("B2:B").setValue(`=IFERROR(IF(ISBLANK(INDIRECT(ADDRESS(ROW(),6,4))),"",INDEX('Sign-In Sheet'!C:C,MATCH(2,1/('Sign-In Sheet'!B:B=INDIRECT(ADDRESS(ROW(),6,4))),1))),"")`);
statusSheet.getRange("C1").setValue(`DATE`);
statusSheet.getRange("C2:C").setValue(`=IFERROR(IF(ISBLANK(INDIRECT(ADDRESS(ROW(),6,4))),"",TEXT(INDEX('Sign-In Sheet'!$A:$A,MATCH(2,1/('Sign-In Sheet'!$B:$B=INDIRECT(ADDRESS(ROW(),6,4))),1)),"DD/MM/YY")),"") `);
statusSheet.getRange("D1").setValue(`TIME`);
statusSheet.getRange("D2:D").setValue(`=IFERROR(IF(ISBLANK(INDIRECT(ADDRESS(ROW(),6,4))),"",TEXT(INDEX('Sign-In Sheet'!$A:$A,MATCH(2,1/('Sign-In Sheet'!$B:$B=INDIRECT(ADDRESS(ROW(),6,4))),1)),"HH:MM")),"")`);
statusSheet.getRange("E1").setValue(`CELL NUMBER`);
statusSheet.getRange("E2:E").setValue(`=IFERROR(INDEX(ROSTER!C:C,MATCH(INDIRECT(ADDRESS(ROW(),6,4)),ROSTER!D:D,0)),"")`);
statusSheet.getRange("G1").setValue(`MEDICAL CERT`);
statusSheet.getRange("G2:G").setValue(`=IFERROR(INDEX(ROSTER!E:E,MATCH(INDIRECT(ADDRESS(ROW(),6,4)),ROSTER!D:D,0)),"")`);
statusSheet.getRange("H1").setValue(`SPECIAL TEAMS`);
statusSheet.getRange("H2:H").setValue(`=IFERROR(CONCATENATE(ArrayFormula(INDEX(ROSTER!F:M,MATCH(INDIRECT(ADDRESS(ROW(),6,4)),ROSTER!D:D,0))&" | ")),"")`);
Logger.log(`UPDATED SHEET WITH ASSET QUERY`);

// UPDATE SHEET WITH AVAILABLE ASSETS QUERY
let availableAssetSheet = eventData.insertSheet(); // insert (add) a new sheet
availableAssetSheet.setName(`AVAILABLE ASSETS`);
// let availalbeSheet = eventData.getSheetByName(`AVAILABLE ASSETS`);
availableAssetSheet.getRange("A1").setValue(`=QUERY(STATUS!1:1000,"SELECT A,B,C,D,E,F,G,H WHERE B='Sign-In'",-1)`);
Logger.log(`UPDATED SHEET WITH AVAILABLE ASSET QUERY`);

// UPDATE SHEET WITH RESPONDING QUERY
let respondingSheet = eventData.insertSheet(); // insert (add) a new sheet
respondingSheet.setName(`RESPONDING`);
//let respondingSheet = eventData.getSheetByName(`RESPONDING`);
respondingSheet.getRange("A1").setValue(`RESPONDING`);
respondingSheet.getRange("A2").setValue(`=IFERROR(INDEX(ROSTER!B:B,MATCH(INDIRECT(ADDRESS(ROW(),3,4)),ROSTER!D:D,0)),"")`);
respondingSheet.getRange("B1").setValue(`CELL`);
respondingSheet.getRange("B2").setValue(`=IFERROR(INDEX(ROSTER!C:C,MATCH(INDIRECT(ADDRESS(ROW(),3,4)),ROSTER!D:D,0)),"")`);
respondingSheet.getRange("C1").setValue(`=QUERY(RESPONSES!A:C,"SELECT B,C WHERE C != 'Unavailable'")`);
Logger.log(`UPDATED SHEET WITH RESPONDING QUERY`);

// UPDATE SHEET WITH CODE ORANGE RECALL SHEET
let codeorangerecallSheet = eventData.insertSheet(); // insert (add) a new sheet
codeorangerecallSheet.setName(`CODEORANGE-RECALL`);
//let codeorangerecallSheet = eventData.getSheetByName(`CODEORANGE-RECALL`);
codeorangerecallSheet.getRange("A1").setValue(`=QUERY(ROSTER!1:987,"SELECT B,C WHERE P = 'YES'")`);
Logger.log(`UPDATED SHEET WITH CODEORANGE RECALL QUERY`);
/** 
// DELETE Sheet-1 (autogenerated)
let getSheet1 = eventData.getSheetByName('Sheet 1');
let deleteSheet1 = eventData.deleteSheet(getSheet1);
Logger.log("Deleted `Sheet 1`");
*/ 
// ARRANGE SHEETS(TABS)
// RESPONDING IN POSITION 1
let activeSheet = eventData.getSheetByName(`RESPONDING`).activate();
eventData.moveActiveSheet(1);
// AVAILALBE ASSETS IN POSITION 2
activeSheet = eventData.getSheetByName(`AVAILABLE ASSETS`).activate();
eventData.moveActiveSheet(2);
// STATUS LIST IN POSITION 3
activeSheet = eventData.getSheetByName(`STATUS`).activate();
eventData.moveActiveSheet(3);
// SIGN-IN TO POSITION 4
activaactiveSheetteStatusSheet = eventData.getSheetByName(`Sign-In Sheet`).activate();
eventData.moveActiveSheet(4);
// ROSTER TO POSITION 5
activeSheet = eventData.getSheetByName(`ROSTER`).activate();
eventData.moveActiveSheet(5);
// RESPONSES TO POSITION 6
activeSheet = eventData.getSheetByName(`RESPONSES`).activate();
eventData.moveActiveSheet(6);
Logger.log(`REARRANGED SHEETS`);

// DOC UPDATES *************************************************************
// ADD FULL REPORT TO THE SUMMARY DOC
AddHeaderFooterTitle(summaryDoc,directoryName,agencyFooter,`SCZ-SAR RESPONSE REQUEST SUMMARY & NOTES`);
let summaryBody = summaryDoc.getBody();
summaryBody.appendParagraph(fullReport);
Logger.log(`ADDED FULL REPORT TO SUMMARY DOC`);

// ADD ASSET SHEET TO SUMMARY DOC
let assetURL = {};
assetURL[DocumentApp.Attribute.LINK_URL] = `https://docs.google.com/spreadsheets/d/`+eventDataId;
let docDirectoryURL = {};
docDirectoryURL[DocumentApp.Attribute.LINK_URL] = `https://drive.google.com/drive/folders/`+newEventFolderId;
summaryBody.appendParagraph(`SEARCH ASSET SHEET\n`).setAttributes(docBoldStyle).setAttributes(assetURL); 
summaryBody.appendParagraph(`DOCUMENT DIRECTORY\n`).setAttributes(docBoldStyle).setAttributes(docDirectoryURL); 
Logger.log(`UPDATED SUMMARY DOC WITH ASSET SHEET LINK & DOCUMENT DIRECTORY LINK`);

// PUT THE QR CODES INTO A TABLE IN SUMMARY DOC
// CREATE THE ARRAY FOR THE TABLE
let textAvailability = `AVAILABILITY LINK:`;
let textSignInOut = `SIGN-IN/OUT LINK`; // HYPERLINK TO signInQRLink VARIABLE BELOW.
let signInURLStyle = {};
signInURLStyle[DocumentApp.Attribute.LINK_URL] = signInQRLink;
let availURLStyle = {};
availURLStyle[DocumentApp.Attribute.LINK_URL] = availURL;
let cellsQRTable = [ [textAvailability,textSignInOut], [``,``] ];
// POPULATE THE TABLE WITH THE ARRAY & FORMAT
let qrTable = summaryBody.appendTable(cellsQRTable);
qrTable.getCell(0,0).setAttributes(availURLStyle).setAttributes(docBoldStyle);
qrTable.getCell(0,1).setAttributes(signInURLStyle).setAttributes(docBoldStyle);
qrTable.getCell(1,0).insertImage(0,availQRImage).setAttributes(imageSize);
qrTable.getCell(1,1).insertImage(0,signInQRImage).setAttributes(imageSize);
qrTable.setAttributes(styleCenter);
Logger.log(`ADDED SIZED QR CODES TO DOC IN TABLE`)

// *************************************************************
// CREATE THE SIGN-IN POSTER IN THE DIRECTORY
let signInPosterDoc = DocumentApp.create(directoryName+" SIGN-IN / OUT LINK");
let signInPosterDocId = signInPosterDoc.getId();
let docPosterFile = DriveApp.getFileById(signInPosterDocId);
docPosterFile.moveTo(eventFolder);
Logger.log(`CREATED THE SIGN-IN POSTER FILE IN THE DIRECTORY`);
AddHeaderFooterTitle(signInPosterDoc,directoryName,agencyFooter,`EVENT SIGN-IN/OUT QR CODE:`);
let signInPosterBody = signInPosterDoc.getBody();
signInPosterBody.appendPageBreak();
signInPosterBody.insertImage(2, signInQRImage).setAttributes(styleCenter);
Logger.log(`ADDED CONTENT TO THE SIGN-IN POSTER`);

// *************************************************************
// CREATE AN EVENT "IAP" AND ADD PRELIMINARY INFORMATION & SAVE IN EVENT DIRECTORY
  // COPY IAP TEMPLATE, RENAME, & MOVE INTO MISSION DIRECTORY
  // IDENTIFY DATA-PLACEHOLDERS ON TEMP FILE
  // REPLACE PLACEHOLDERS ON NEW COPY

// ADDITIONAL ACTION NOTES
  // ADD A LINE TO THE SEARCH LOG
  // GENERATE A SARTOPO MAP WITH THE CP AND LKP MARKED
  // GENERATE A WEB-POST WITH MISSION INFORMATION (FOR INTERNAL ACCESS ONLY) - SCRIPTS CANNOT ACCESS GOOGLE SITES


// SEND TEAM MESSAGE BASED ON CURRENT ROSTER & CURRENT RESPONSES VIA TWILIO *************************************************************
    // 
    // THIS IS THE RECALL LIST SHEET >>>>  codeorangerecallSheet = eventData.getSheetByName(`CODEORANGE-RECALL`)
    // APPLY THE TWILIO SCRIPT TO THIS SHEET.
    // SCRIPT SHOULD CALL FUNCTION THAT ACTS ON THE SHEET CREATED BY THE SCRIPT ABOVE
/**  
//SET UP SHEET PARAMETERS
//codeorangerecallSheet 

let MEMBER_NAME = 0;
let CUSTOMER_PHONE_NUMBER = 1;
let RESPONSE_URL = availURL
let RESPONSE_ASSETS = NEED TO ADD TO VARS - SEE LINE 24
let EVENT_TYPE = formResponseEventType
let BRIEFING_TIME = formResponseBriefingDate & NEED TO ADD TO VARS - SEE LINE 24
let CP_LOCATION = NEED TO ADD TO VARS - SEE LINE 24
let MESSAGE_STATUS = 6;  // Whether the SMS was sent or not


// MESSAGE FUNCTION
function sendSms(customerPhoneNumber, memberName, responseURL, responseAssets, eventType, briefingTime, cpLocation) {
let twilioAccountSID = userProperties.getProperty('TWILIO_ACCOUNT_SID'); //     <----- !!!!! TWILIO ACCOUNT INFO
let twilioAuthToken = userProperties.getProperty('TWILIO_AUTH_TOKEN');          <----- !!!!! TWILIO ACCOUNT INFO
let twilioPhoneNumber = userProperties.getProperty('TWILIO_PHONE_NUMBER');      <----- !!!!! TWILIO ACCOUNT INFO
  let twilioUrl = 'https://api.twilio.com/2010-04-01/Accounts/' + twilioAccountSID + '/Messages.json';
let authenticationString = twilioAccountSID + ':' + twilioAuthToken;
try {
  UrlFetchApp.fetch(twilioUrl, {
    method: 'post',
    headers: {
      Authorization: 'Basic ' + Utilities.base64Encode(authenticationString)
    },
    payload: {
      To: "+" + customerPhoneNumber.toString(),
      Body: "SCZSAR: [ASSETS] REQUESTED FOR [EVENT TYPE]. BRIEFING AT [TIME] AT [COMMAND POST LOCATION]. RESPOND WITH YOUR AVAILABILITY TO " + responseURL,
      From: twilioPhoneNumber,  // Your Twilio phone number
    },
  });
  return 'sent: ' + new Date();
} catch (err) {
  return 'error: ' + err;
}
};

// SEND FUNCTION
function sendSmsToAll() {
 let rows = codeorangerecallSheet.getDataRange().getValues();
 let headers = rows.shift();
 rows.forEach(function(row) {row[MESSAGE_STATUS] =  sendSms(row[CUSTOMER_PHONE_NUMBER], row[MEMBER_NAME],RESPONSE_URL, RESPONSE_ASSETS, EVENT_TYPE, BRIEFING_TIME, CP_LOCATION);

 });
  sheet.getRange(2, 1, rows.length, headers.length).setValues(rows);
};

*/
      // CodeOrangeMessage(`....`);
      
      // HOW DO WE GET IT TO REPEAT?
      // ?? SHOULD WE SETUP A BUTTON ON THE SHEET THAT EXECUTES THE CALL FUNCTION?


} // END OF FUNCTION
