theMission.gs

function theMission(response) {
  const userConfig = userConfiguration();

  // CREATE THE DIRECTORY
  let directoryName = `${response['GENERAL BRIEFING DATE']} ${response['INCIDENT NAME']} (${response['MP NAME']}) ${response['EVENT TYPE']}`;
  let dir = createDirectory(directoryName,userConfig.missionDirectory);
  let dirId = dir.getId();
  let assetsDirName = `${response['GENERAL BRIEFING DATE']} ${response['INCIDENT NAME']} (${response['MP NAME']}) ${response['EVENT TYPE']} File Assets`;
  let assetsDir = createDirectory(assetsDirName,dirId);
  let directoryURL = dir.getUrl();
  Logger.log(`CREATED THE DIRECTORY`);

  // SET DOCUMENT STYLES
  let styleCenter = {};
  styleCenter[DocumentApp.Attribute.HORIZONTAL_ALIGNMENT] = DocumentApp.HorizontalAlignment.CENTER;
  let docBoldStyle = {};
  docBoldStyle[DocumentApp.Attribute.BOLD] = true;
  let imageSize = {};
  imageSize[DocumentApp.Attribute.HEIGHT] = 300;
  imageSize[DocumentApp.Attribute.WIDTH] = 300;
  let docNoBoldStyle = {};
  docNoBoldStyle[DocumentApp.Attribute.BOLD] = false;
  Logger.log(`STYLES SET`);

  const eventData = createSpreadSheet(`${directoryName} EVENT DATA`, dir);
  const eventDataId = eventData.getId();
  let availabilityForm = addEventForm(assetsDir,`${directoryName} RESPONSES`,`RESPONSES`,true,true,eventDataId);
  let availURL = sar_populateAvailabilityForm(availabilityForm);
  let availQRImage = createQRCode(availURL,`${directoryName} AVAILABILITY QR CODE`,assetsDir);
  let signInForm = addEventForm(assetsDir,`${directoryName} Sign-In Sheet`,`SIGN-IN SHEET`,true,true,eventDataId);
  let signInURL = signInForm.getPublishedUrl();
  let signInQRImage = createQRCode(signInURL,`${directoryName} SIGN-IN QR CODE`,assetsDir);
  const summaryDoc = doc_createDocument(`${directoryName} Summary & Notes`, dir);
  const eventIAP = createSheetFromTemplateId(`${directoryName} IAP - BLANK DRAFT`, dir, userConfig.templateIAPId);

  // UPDATE FORMS & DOCUMENTS
  let sheetIAPData = eventIAP.getSheetByName(`INSTRUCTIONS AND DATA`);
  let iapSheetData = [
      ["B13",response['INCIDENT NAME']],
      ["B14",response.date], 
      ["B15",response.time],
      ["B18",response['GENERAL BRIEFING DATE']],
      ["B19",response['GENERAL BRIEFING TIME']],
      ["B20",``],
      ["B21",``],
      ["B23",`AUTOGENERATED BY SCZSAR INCIDENT FORM`],
    ]
  addDataArrayToSheet(sheetIAPData,iapSheetData);

  let searchLogData = [
    response['EVENT TYPE'],
    response.date, 
    response.time,
    sarConfig().searchLogFormulaYear,
    response['SCZ-SO CASE # / CAL OES #'],
    response['INCIDENT NAME'],
    response['CP LOCATION'],
    response['MP NAME'],
    directoryURL,
    response['SARTOPO LINK'],
    response['MP DOB'],
    sarConfig().searchLogFormulaMPAge,
    response['MP SEX'],
    response['MP Type'],
    response['MP LKP Date'],
    response['MP LKP Time'],
    response['MP LKP'],
    ,,,,,,,
    sarConfig().searchLogFormulaLKPLat,
    sarConfig().searchLogFormulaLKPLong,
    sarConfig().searchLogFormulaFindLat,
    sarConfig().searchLogFormulaFindLong,
    sarConfig().searchLogFormulaLinearTravel,
    sarConfig().searchLogFormulaDurationOfSearch,
    ,
    eventDataId
    ];
  addDataToSheet(userConfig.searchLogId,userConfig.searchLogSheetId,searchLogData);

  let signInItemMC = signInForm.addMultipleChoiceItem();
  signInItemMC.setTitle("In/Out")
      .setChoices([
          signInItemMC.createChoice("Sign-In"),
          signInItemMC.createChoice("Sign-Out")
      ])
      .showOtherOption(false)
      .setRequired(true);
  Logger.log(`POPULATED THE SIGN-IN FORM`);

  let dataCodeorangeTeamAttendance = [
    response['GENERAL BRIEFING DATE'],
    response['EVENT TYPE'],
    response['INCIDENT NAME'],
    eventDataId,
    sarConfig().attendanceFormulaEventDataSheetURL,
    sarConfig().attendanceFormulaYEAR,
    sarConfig().attendanceFormulaEventDataSheetEVENTID,
    sarConfig().attendanceFormulaCOPIED,
    sarConfig().attendanceFormulaReadyToCopy,
    ];
  addDataToSheet(userConfig.attendanceId,userConfig.attendanceGid,dataCodeorangeTeamAttendance);

  // UPDATE SHEETS
  copyDynamicSheetData(userConfig.rosterId,'ACTIVE TEAM','A:N','CODEORANGE[A]','A1',eventData,'ROSTER'); // Copy current roster data to eventdata  **** THIS IS NOT A UNIVERSAL FUNCTION - A ROSTER MUST EXIST.
  
        // POSSIBLY REMOVE - *************
        let rosterSheet = eventData.getSheetByName(`ROSTER`); 
        rosterSheet.getRange("O1").setValue(`RECALL?`);
        rosterSheet.getRange("O2:O").setValue(`=IF(ISBLANK(INDIRECT(ADDRESS(ROW(),4,4))),"", IFNA(IF(MATCH(INDIRECT(ADDRESS(ROW(),4,4)),STATUS!C:C,0)>0,"NO"),"YES"))`);
        // END OF REMOVAL *********

  let statusSheet = eventData.insertSheet().setName(`STATUS`);
  addDataArrayToSheet(statusSheet,sarConfig().statusSheetData);

  let availableAssetSheet = eventData.insertSheet().setName(`AVAILABLE ASSETS`);
  addDataArrayToSheet(availableAssetSheet,sarConfig().availableAssetData);

  let codeorangeRecallSheet = eventData.insertSheet().setName(`CODEORANGE-RECALL`);
  addDataArrayToSheet(codeorangeRecallSheet,sarConfig().codeorangeRecallData);

  let codeorangeCallLog = eventData.insertSheet().setName(`CODEORANGE-CALL_LOG`); // - THIS WAS MOVED TO sarFunctions
  codeorangeRecallSheet.getRange('A:B').copyTo(codeorangeCallLog.getRange('A:B'), {contentsOnly:true});
  // addDataArrayToSheet(codeorangeCallLog,sarConfig().codeorangeCallLogData);

  eventData.deleteSheet(eventData.getSheetByName('Sheet1')); // DELETE Sheet-1 (autogenerated)
  
  // ARRANGE SHEETS(TABS)
  eventData.getSheetByName(`AVAILABLE ASSETS`).activate();
  eventData.moveActiveSheet(1);
  eventData.getSheetByName(`STATUS`).activate();
  eventData.moveActiveSheet(2);
  eventData.getSheetByName(`ROSTER`).activate();
  eventData.moveActiveSheet(3);
  eventData.getSheetByName(`SIGN-IN SHEET`).activate();
  eventData.moveActiveSheet(4);
  eventData.getSheetByName(`RESPONSES`).activate();
  eventData.moveActiveSheet(5);

  // SUMMARY DOC UPDATES
  let responseSummary = [
    ['INCIDENT NAME',response['INCIDENT NAME']],
    ['SCZ-SO CASE # / CAL OES #',response['SCZ-SO CASE # / CAL OES #']],
    ['GENERAL BRIEFING DATE',response['GENERAL BRIEFING DATE']],
    ['GENERAL BRIEFING TIME',response['GENERAL BRIEFING TIME']],
    ['EVENT TYPE',response['EVENT TYPE']],
    ['MP NAME',response['MP NAME']],
    ['MP SEX',response['MP SEX']],
    ['MP DOB',response['MP DOB']],
    ['MP LKP',response['MP LKP']],
    ['MP Type',response['MP Type']], 
    ['MP LKP Date',response['MP LKP Date']], 
    ['MP LKP Time',response['MP LKP Time']],
    ['RESOURCE NEEDS',stringifyArray(response['RESOURCE NEEDS'])],
    ['CP LOCATION',response['CP LOCATION']],
    ['SARTOPO LINK',response['SARTOPO LINK']],
    ['DEPLOY CODEORANGE',response['DEPLOY CODEORANGE']],
    [`SEARCH ASSET SHEET`,`DOCUMENT DIRECTORY`],
  ];
  addDocHeaderFooter(summaryDoc,directoryName,userConfig.agencyFooter+' '+response.date+' '+response.time,`SCZ-SAR RESPONSE REQUEST SUMMARY & NOTES`);
  let summaryBody = summaryDoc.getBody();
  let summaryTable = summaryBody.appendTable(responseSummary).setBorderWidth(0).setColumnWidth(0,175);
  for(j=0;j < summaryTable.getNumRows();j++) {
    summaryTable.getCell(j,0).setAttributes(docBoldStyle);
    summaryTable.getCell(j,1).setAttributes(docNoBoldStyle);
  }
  summaryBody.appendParagraph('INCIDENT DESCRIPTION:').setAttributes(docBoldStyle);
  summaryBody.appendParagraph(response['INCIDENT DESCRIPTION']).setAttributes(docNoBoldStyle);

  let selectCell = [];
  selectCell = searchArray(responseSummary,'SARTOPO LINK');
  let sartopoURL = {};
  sartopoURL[DocumentApp.Attribute.LINK_URL] = response['SARTOPO LINK'];
  summaryTable.getCell(selectCell[0],selectCell[1]).setAttributes(sartopoURL);
  
  selectCell = searchArray(responseSummary,'SEARCH ASSET SHEET');
  let assetURL = {};
  assetURL[DocumentApp.Attribute.LINK_URL] = `https://docs.google.com/spreadsheets/d/`+eventDataId;
  summaryTable.getCell(selectCell[0],selectCell[1]).setAttributes(docBoldStyle).setAttributes(assetURL);

  selectCell = searchArray(responseSummary,'DOCUMENT DIRECTORY');
  let docDirectoryURL = {};
  docDirectoryURL[DocumentApp.Attribute.LINK_URL] = `https://drive.google.com/drive/folders/`+dir.getId();
  summaryTable.getCell(selectCell[0],selectCell[1]).setAttributes(docBoldStyle).setAttributes(docDirectoryURL);
  Logger.log(`UPDATED SUMMARY DOC WITH ASSET SHEET LINK & DOCUMENT DIRECTORY LINK`);
  
  summaryBody.appendPageBreak().setAttributes(docNoBoldStyle);

  let signInURLStyle = {};
  signInURLStyle[DocumentApp.Attribute.LINK_URL] = signInURL;
  let availURLStyle = {};
  availURLStyle[DocumentApp.Attribute.LINK_URL] = availURL;
  let cellsQRTable = [ 
    [`AVAILABILITY LINK:`,`SIGN-IN/OUT LINK`], 
    [``,``] 
  ];
  let qrTable = summaryBody.appendTable(cellsQRTable);
  qrTable.getCell(0,0).setAttributes(availURLStyle).setAttributes(docBoldStyle);
  qrTable.getCell(0,1).setAttributes(signInURLStyle).setAttributes(docBoldStyle);
  qrTable.getCell(1,0).insertImage(0,availQRImage).setAttributes(imageSize);
  qrTable.getCell(1,1).insertImage(0,signInQRImage).setAttributes(imageSize);
  qrTable.setAttributes(styleCenter);

  sar_createSignInPoster(dir,directoryName,userConfig.agencyFooter,response.date,response.time,signInQRImage,styleCenter);

  // CODEORANGE COMMS ******** DEPLOYS MESSAGING TO ALL TEAMS *********************
  if (response['DEPLOY CODEORANGE'] == 'YES') {
    sendSmsToAll(codeorangeCallLog,sarMessagingConfig(response,availURL).codeOrangeMissionMessage);
    Logger.log('ACTIVATED CODEORANGE');
  }
  
} // END OF theMission()